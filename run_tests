#!/bin/bash

# run "chmod u+x run_tests" on this file to be able to run it
# Execute using "./run_tests &> run_tests_output.txt"
TEST_ERROR=0
system_output=0
pass=0

function run_test {
	echo "============== Start $1 ==============="
	timeout 60 ./Execution
	system_output=$(echo $?)
	
	if [ $system_output -eq 0 ] || [ $system_output -eq 1 ]
	then
		echo "$1 completed"
		echo "Comparing generated output with expected output"
		
		# compare generated output with expected output
		output_eq=$(diff -q "./Output.txt" "./$2/Output.txt")
		message_eq=$(diff -q "./Message.txt" "./$2/Message.txt")
		heapofile_eq=$(diff -q "./HEAPofile.txt" "./$2/HEAPofile.txt")
		if [ -n $output_eq ] && [ -n $message_eq ] && [ -n $heapofile_eq ]
		then
			echo "Files are identical"
			(($3+=1))
		else
			echo "Files are not identical"
		fi
	elif [ $system_output -eq 139 ]
	then
		echo "$1 had a segmentation fault"
		TEST_ERROR=4   
		#The error code for this is 139
	else
		echo "$1 went over a minute"
		TEST_ERROR=2
		#The error code is 124
	fi
}

# Build project: -B forces everything to be rebuilt
make -B

if [ $? -ne 0 ]
then
	echo "Build failed for program"
	TEST_ERROR=1
else
	echo "Build succeeded"
	
	echo "======================================="
	echo "-------- Run posted test cases --------"
	echo "======================================="
	for i in {1..30}
	do
		testcase="$i"
		if [ $i -lt 10 ]
		then
			zero="0"
			num="$i"
			testcase="$zero$num"
		fi
		
		cp PJ2-Posted-Test-Cases/$testcase/* .
		chmod u+x Execution
		
		run_test $testcase PJ2-Posted-Test-Cases/$testcase pass
		
		rm Execution Output.txt Message.txt HEAPifile.txt HEAPofile.txt Commands
	done

	# Output number of test cases passed
	echo "======================================="
	echo "Passed $pass/30 posted test cases total"
	echo "======================================="
fi
